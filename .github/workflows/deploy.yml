name: Build and Deploy to ECS

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: kvs-infer
  ECS_CLUSTER: vivid-fish-il1akc
  ECS_SERVICE: kvs-infer-gpu
  ECS_TASK_DEFINITION: kvs-infer-gpu
  CONTAINER_NAME: kvs-infer

permissions:
  id-token: write   # Required for AWS OIDC
  contents: read
  packages: write

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build-image.outputs.image-uri }}
      image-tag: ${{ steps.build-image.outputs.image-tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper versioning

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            PYTHON_VERSION=3.11
            PYTORCH_VERSION=2.3.1
            CUDA_VERSION=12.1.0

      - name: Set image URI output
        id: set-image-uri
        run: |
          IMAGE_TAG="sha-${GITHUB_SHA::7}"
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}"
          echo "image-uri=${IMAGE_URI}" >> $GITHUB_OUTPUT
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "### 🐳 Docker Image Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image URI:** \`${IMAGE_URI}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** \`${IMAGE_TAG}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit SHA:** \`${GITHUB_SHA}\`" >> $GITHUB_STEP_SUMMARY

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:sha-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://console.aws.amazon.com/ecs/v2/clusters/${{ env.ECS_CLUSTER }}/services/${{ env.ECS_SERVICE }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-Deploy-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: true

      - name: Download current task definition
        id: download-taskdef
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query 'taskDefinition' \
            --output json > task-definition.json
          
          # Remove fields that cannot be used in register-task-definition
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            task-definition.json > task-definition-clean.json
          
          echo "Task definition downloaded and cleaned"
          cat task-definition-clean.json

      - name: Update task definition with new image
        id: task-def
        run: |
          NEW_IMAGE_URI="${{ needs.build.outputs.image-uri }}"
          
          # Update the container image
          jq --arg IMAGE "$NEW_IMAGE_URI" \
            '.containerDefinitions[0].image = $IMAGE' \
            task-definition-clean.json > task-definition-updated.json
          
          echo "Updated task definition with new image:"
          echo "Image: $NEW_IMAGE_URI"
          cat task-definition-updated.json

      - name: Register new task definition
        id: register-taskdef
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-definition-updated.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "task-definition-arn=${TASK_DEF_ARN}" >> $GITHUB_OUTPUT
          echo "Registered new task definition: ${TASK_DEF_ARN}"
          
          echo "### 📋 Task Definition Registered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**ARN:** \`${TASK_DEF_ARN}\`" >> $GITHUB_STEP_SUMMARY

      - name: Update ECS service
        id: update-service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.register-taskdef.outputs.task-definition-arn }} \
            --force-new-deployment \
            --output json > service-update.json
          
          echo "ECS service update initiated"
          cat service-update.json

      - name: Wait for service stability
        id: wait-service
        run: |
          echo "Waiting for service to reach stable state..."
          
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --no-cli-pager
          
          echo "### ✅ Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster:** \`${{ env.ECS_CLUSTER }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** \`${{ env.ECS_SERVICE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Task Definition:** \`${{ steps.register-taskdef.outputs.task-definition-arn }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ needs.build.outputs.image-uri }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 Service is stable and running!"

      - name: Get deployment status
        if: always()
        run: |
          echo "Fetching current deployment status..."
          
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].{
              serviceName: serviceName,
              status: status,
              runningCount: runningCount,
              desiredCount: desiredCount,
              deployments: deployments[*].{
                status: status,
                taskDefinition: taskDefinition,
                desiredCount: desiredCount,
                runningCount: runningCount
              }
            }' \
            --output json

      - name: Deployment failure notification
        if: failure()
        run: |
          echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster:** \`${{ env.ECS_CLUSTER }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** \`${{ env.ECS_SERVICE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the logs above for details. Common issues:" >> $GITHUB_STEP_SUMMARY
          echo "- Container health check failures" >> $GITHUB_STEP_SUMMARY
          echo "- Insufficient resources (CPU/Memory/GPU)" >> $GITHUB_STEP_SUMMARY
          echo "- Permission issues (IAM roles)" >> $GITHUB_STEP_SUMMARY
          echo "- Configuration errors (environment variables)" >> $GITHUB_STEP_SUMMARY
          exit 1

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: failure() && needs.deploy.result == 'failure'
    
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-Rollback-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get previous stable task definition
        id: get-previous
        run: |
          # Get the previous task definition (before the failed deployment)
          PREVIOUS_TASK_DEF=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].deployments[?rolloutState==`COMPLETED`].taskDefinition' \
            --output text | head -n 1)
          
          if [ -z "$PREVIOUS_TASK_DEF" ]; then
            echo "No previous stable task definition found"
            exit 1
          fi
          
          echo "previous-task-def=${PREVIOUS_TASK_DEF}" >> $GITHUB_OUTPUT
          echo "Found previous stable task definition: ${PREVIOUS_TASK_DEF}"

      - name: Rollback to previous task definition
        run: |
          echo "Rolling back to: ${{ steps.get-previous.outputs.previous-task-def }}"
          
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.get-previous.outputs.previous-task-def }} \
            --force-new-deployment
          
          echo "### 🔄 Rollback Initiated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Rolling back to: \`${{ steps.get-previous.outputs.previous-task-def }}\`" >> $GITHUB_STEP_SUMMARY
